let assert = chai.assert;
describe("TestoviParser", function () {
  describe("dajTacnost()", function () {
    it("Svi testovi prolaze", function () {
      var string =
        '{\n  "stats": {\n\t"suites": 2,\n\t"tests": 2,\n\t"passes": 2,\n\t"pending": 0,\n\t"failures": 0,\n\t"start": "2021-11-05T15:00:26.343Z",\n\t"end": "2021-11-05T15:00:26.352Z",\n\t"duration": 9\n  },\n  "tests": [\n\t{\n  \t"title": "should draw 3 rows when parameter are 2,3",\n  \t"fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n  \t"file": null,\n  \t"duration": 1,\n  \t"currentRetry": 0,\n  \t"speed": "fast",\n  \t"err": {}\n\t},\n\t{\n  \t"title": "should draw 2 columns in row 2 when parameter are 2,3",\n  \t"fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n  \t"file": null,\n  \t"duration": 0,\n  \t"currentRetry": 0,\n  \t"speed": "fast",\n  \t"err": {}\n\t}\n  ],\n  "pending": [],\n  "failures": [],\n  "passes": [\n\t{\n  \t"title": "should draw 3 rows when parameter are 2,3",\n  \t"fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n  \t"file": null,\n  \t"duration": 1,\n  \t"currentRetry": 0,\n  \t"speed": "fast",\n  \t"err": {}\n\t},\n\t{\n  \t"title": "should draw 2 columns in row 2 when parameter are 2,3",\n  \t"fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n  \t"file": null,\n  \t"duration": 0,\n  \t"currentRetry": 0,\n  \t"speed": "fast",\n  \t"err": {}\n\t}\n  ]\n}\n';

      var objekat = TestoviParser.dajTacnost(string);
      assert.equal(
        JSON.stringify(objekat),
        '{"tacnost":"100%","greske":[]}',
        "trebaju svi testovi prolaziti"
      );
    });
    it("Svi testovi padaju", function () {
      var string =
        '{\n  "stats": {\n    "suites": 2,\n    "tests": 2,\n    "passes": 0,\n    "pending": 0,\n    "failures": 2,\n    "start": "2021-11-26T10:01:24.600Z",\n    "end": "2021-11-26T10:01:24.622Z",\n    "duration": 22\n  },\n  "tests": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 4,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj redova treba biti 3: expected 2 to equal 3",\n        "showDiff": true,\n        "actual": "2",\n        "expected": "3",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj redova treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:9:14)"\n      }\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 0,\n      "currentRetry": 0,\n      "err": {\n        "stack": "TypeError: Cannot read properties of undefined (reading \'getElementsByTagName\')\\n    at Context.<anonymous> (test.js:16:30)",\n        "message": "Cannot read properties of undefined (reading \'getElementsByTagName\')"\n      }\n    }\n  ],\n  "pending": [],\n  "failures": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 4,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj redova treba biti 3: expected 2 to equal 3",\n        "showDiff": true,\n        "actual": "2",\n        "expected": "3",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj redova treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:9:14)"\n      }\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 0,\n      "currentRetry": 0,\n      "err": {\n        "stack": "TypeError: Cannot read properties of undefined (reading \'getElementsByTagName\')\\n    at Context.<anonymous> (test.js:16:30)",\n        "message": "Cannot read properties of undefined (reading \'getElementsByTagName\')"\n      }\n    }\n  ],\n  "passes": []\n}';
      var objekat = TestoviParser.dajTacnost(string);
      assert.equal(
        JSON.stringify(objekat),
        '{"tacnost":"0%","greske":["Tabela crtaj() should draw 3 rows when parameter are 2,3","Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3"]}',
        "trebaju svi testovi padati"
      );
    });
    it("Testovi se ne mogu pokrenuti", function () {
      var string =
        '{\n  "stats": {\n    "suites": 2,\n    "tests": 2,\n    "passes": 0,\n    "pending": 0,\n    "failures": 2,\n    "start": "2021-11-26T10:01:24.600Z",\n    "end": "2021-11-26T10:01:24.622Z",\n    "duration": 22\n  },\n  "tests": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 4,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj redova treba biti 3: expected 2 to equal 3",\n        "showDiff": true,\n        "actual": "2",\n        "expected": "3",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj redova treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:9:14)"\n      }\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 0,\n      "currentRetry": 0,\n      "err": {\n        "stack": "TypeError: Cannot read properties of undefined (reading \'getElementsByTagName\')\\n    at Context.<anonymous> (test.js:16:30)",\n        "message": "Cannot read properties of undefined (reading \'getElementsByTagName\')"\n      }\n    }\n  ],\n  "pending": [],\n  "failures": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 4,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj redova treba biti 3: expected 2 to equal 3",\n        "showDiff": true,\n        "actual": "2",\n        "expected": "3",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj redova treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:9:14)"\n      }\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 0,\n      "currentRetry": 0,\n      "err": {\n        "stack": "TypeError: Cannot read properties of undefined (reading \'getElementsByTagName\')\\n    at Context.<anonymous> (test.js:16:30)",\n        "message": "Cannot read properties of undefined (reading \'getElementsByTagName\')"\n      }\n    }\n  ],\n  "passes": []\n}}';
      var objekat = TestoviParser.dajTacnost(string);
      assert.equal(
        JSON.stringify(objekat),
        '{"tacnost":"0%","greske":["Testovi se ne mogu izvršiti"]}',
        "Testovi se ne mogu izvršiti"
      );
    });
    it("Jedan test od 3 prolaze", function () {
      var string =
        '{\n  "stats": {\n    "suites": 2,\n    "tests": 3,\n    "passes": 1,\n    "pending": 0,\n    "failures": 2,\n    "start": "2021-11-26T10:46:24.206Z",\n    "end": "2021-11-26T10:46:24.231Z",\n    "duration": 25\n  },\n  "tests": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 5,\n      "currentRetry": 0,\n      "speed": "fast",\n      "err": {}\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 3,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj kolona treba biti 2: expected 1 to equal 2",\n        "showDiff": true,\n        "actual": "1",\n        "expected": "2",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj kolona treba biti 2: expected 1 to equal 2\\n    at Context.<anonymous> (test.js:22:14)"\n      }\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 1,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj kolona treba biti 2: expected 1 to equal 2",\n        "showDiff": true,\n        "actual": "1",\n        "expected": "2",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj kolona treba biti 2: expected 1 to equal 2\\n    at Context.<anonymous> (test.js:35:14)"\n      }\n    }\n  ],\n  "pending": [],\n  "failures": [\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 3,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj kolona treba biti 2: expected 1 to equal 2",\n        "showDiff": true,\n        "actual": "1",\n        "expected": "2",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj kolona treba biti 2: expected 1 to equal 2\\n    at Context.<anonymous> (test.js:22:14)"\n      }\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 1,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj kolona treba biti 2: expected 1 to equal 2",\n        "showDiff": true,\n        "actual": "1",\n        "expected": "2",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj kolona treba biti 2: expected 1 to equal 2\\n    at Context.<anonymous> (test.js:35:14)"\n      }\n    }\n  ],\n  "passes": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 5,\n      "currentRetry": 0,\n      "speed": "fast",\n      "err": {}\n    }\n  ]\n}';

      var objekat = TestoviParser.dajTacnost(string);
      assert.equal(
        JSON.stringify(objekat),
        '{"tacnost":"33.3%","greske":["Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3","Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3"]}',
        "trebaju jedan prolaziti od 3"
      );
    });
    it("Dva od 3 prolaze", function () {
      var string =
        '{\n  "stats": {\n    "suites": 2,\n    "tests": 3,\n    "passes": 2,\n    "pending": 0,\n    "failures": 1,\n    "start": "2021-11-26T10:59:15.167Z",\n    "end": "2021-11-26T10:59:15.192Z",\n    "duration": 25\n  },\n  "tests": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 8,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj redova treba biti 3: expected 2 to equal 3",\n        "showDiff": true,\n        "actual": "2",\n        "expected": "3",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj redova treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:9:14)"\n      }\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 1,\n      "currentRetry": 0,\n      "speed": "fast",\n      "err": {}\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 1,\n      "currentRetry": 0,\n      "speed": "fast",\n      "err": {}\n    }\n  ],\n  "pending": [],\n  "failures": [\n    {\n      "title": "should draw 3 rows when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 3 rows when parameter are 2,3",\n      "file": null,\n      "duration": 8,\n      "currentRetry": 0,\n      "err": {\n        "message": "Broj redova treba biti 3: expected 2 to equal 3",\n        "showDiff": true,\n        "actual": "2",\n        "expected": "3",\n        "operator": "strictEqual",\n        "stack": "AssertionError: Broj redova treba biti 3: expected 2 to equal 3\\n    at Context.<anonymous> (test.js:9:14)"\n      }\n    }\n  ],\n  "passes": [\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 1,\n      "currentRetry": 0,\n      "speed": "fast",\n      "err": {}\n    },\n    {\n      "title": "should draw 2 columns in row 2 when parameter are 2,3",\n      "fullTitle": "Tabela crtaj() should draw 2 columns in row 2 when parameter are 2,3",\n      "file": null,\n      "duration": 1,\n      "currentRetry": 0,\n      "speed": "fast",\n      "err": {}\n    }\n  ]\n}';
      var objekat = TestoviParser.dajTacnost(string);
      assert.equal(
        JSON.stringify(objekat),
        '{"tacnost":"66.7%","greske":["Tabela crtaj() should draw 3 rows when parameter are 2,3"]}',
        "trebaju prolaziti 2 od 3"
      );
    });
  });
});
